linters-settings:
  gocyclo:
    min-complexity: 15
  govet:
    enable:
      - nilness
      - shadow

linters:
  enable:
    - asasalint        # Check for pass []any as any in variadic func(...any)
    - asciicheck       # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk          # Checks for dangerous unicode character sequences
    - bodyclose        # Checks whether HTTP response body is closed successfully
    # - copyloopvar      # Detects places where loop variables are copied
    - decorder         # Check declaration order and count of types, constants, variables and functions
    - dogsled          # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
    - dupl             # Tool for code clone detection
    - dupword          # A linter that checks for duplicate words in the source code (usually miswritten)
    - durationcheck    # Check for two durations multiplied together
    - errcheck         # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errchkjson       # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname          # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint        # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exportloopref    # checks for pointers to enclosing loop variables
    - forcetypeassert  # finds forced type assertions
    - gci              # Gci control golang package import order and make it always deterministic.
    - gocheckcompilerdirectives  # Checks that go compiler directive comments (//go:) are valid.
    - gocognit         # Computes and checks the cognitive complexity of functions
    - goconst          # Finds repeated strings that could be replaced by a constant
    - gocritic         # The most opinionated Go source code linter
    - gocyclo          # Computes and checks the cyclomatic complexity of functions
    - godox            # Tool for detection of FIXME, TODO and other comment keywords
    # - goerr113         # Golang linter to check the errors handling expressions
    - gofmt            # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt          # Gofumpt checks whether code was gofumpt-ed.
    - goheader         # Checks is file header matches to pattern
    - goimports        # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gomoddirectives  # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard       # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec            # Inspects source code for security problems
    - gosmopolitan     # Report certain i18n/l10n anti-patterns in your Go codebase
    - gosimple         # Linter for Go source code that specializes in simplifying a code
    - govet            # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - grouper          # An analyzer to analyze expression groups
    - importas         # Enforces consistent import aliases
    - ineffassign      # Detects when assignments to existing variables are not used
    # - intrange         # Intrange is a linter to find places where for loops could make use of an integer range
    - loggercheck      # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - mirror           # Reports wrong mirror patterns of bytes/strings usage
    - misspell         # Finds commonly misspelled English words in comments
    - nakedret         # Finds naked returns in functions greater than a specified function length
    - nestif           # Reports deeply nested if statements
    - nilerr           # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil           # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx            # noctx finds sending http request without context.Context
    - nolintlint       # Reports ill-formed or insufficient nolint directives
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
    - perfsprint       # Checks that fmt.Sprintf can be replaced with a faster alternative.
    - prealloc         # Finds slice declarations that could potentially be preallocated
    - predeclared      # find code that shadows one of Go's predeclared identifiers
    - protogetter      # Reports direct reads from proto message fields when getters should be used.
    - revive           # golint replacement, finds style mistakes
    - reassign         # Checks that package variables are not reassigned
    - sloglint         # Ensure consistent code style when using log/slog
    - spancheck        # Checks for mistakes with OpenTelemetry/Census spans
    - staticcheck      # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - stylecheck       # Stylecheck is a replacement for golint
    - tagliatelle      # Checks the struct tags.
    - tenv             # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testifylint      # Checks usage of github.com/stretchr/testify.
    - tparallel        # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck        # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert        # Remove unnecessary type conversions
    - unparam          # Reports unused function parameters
    - unused           # Checks Go code for unused constants, variables, functions and types
    - usestdlibvars    # A linter that detect the possibility to use variables/constants from the Go standard library.
    - wastedassign     # wastedassign finds wasted assignment statements
    - whitespace       # Tool for detection of leading and trailing whitespace
  disable:
    - containedctx     # containedctx is a linter that detects struct contained context.Context field
    - contextcheck     # check the function whether use a non-inherited context
    - cyclop           # checks function and package cyclomatic complexity
    - depguard         # Go linter that checks if package imports are in a list of acceptable packages
    - exhaustive       # Check exhaustiveness of enum switch statements
    - exhaustruct      # Checks if all structure fields are initialized.
    - forbidigo        # Forbids identifiers
    - funlen           # Tool for detection of long functions
    - gochecknoglobals # Checks that no globals are present in Go code
    - gochecknoinits   # Checks that no init functions are present in Go code
    - godot            # Check if comments end in a period
    - gomnd            # An analyzer to detect magic numbers.
    - inamedparam      # Reports interfaces with unnamed method parameters.
    - interfacebloat   # A linter that checks the number of methods inside an interface
    - ireturn          # Accept Interfaces, Return Concrete Types
    - lll              # Reports long lines
    - maintidx         # maintidx measures the maintainability index of each function.
    - makezero         # Finds slice declarations with non-zero initial length
    - nlreturn         # nlreturn checks for a new line before return and branch statements to increase code clarity
    - nonamedreturns   # Reports all named returns
    - paralleltest     # paralleltest detects missing usage of t.Parallel() method in your Go test
    - promlinter       # Check Prometheus metrics naming via promlint
    - rowserrcheck     # checks whether Err of rows is checked successfully
    - sqlclosecheck    # Checks that sql.Rows and sql.Stmt are closed.
    - tagalign         # Check that struct tags are well aligned.
    - testableexamples # linter checks if examples are testable (have an expected output)
    - testpackage      # linter that makes you use a separate _test package
    - thelper          # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - varnamelen       # checks that the length of a variable's name matches its scope
    - wrapcheck        # Checks that errors returned from external packages are wrapped
    - wsl              # Whitespace Linter - Forces you to use empty lines!

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - dupl
        - dupword
        - forcetypeassert
        - gosec
        - gocyclo
        - gocognit
        - nakedret

    - path: ^test/.*\.go
      linters:
        - dupl
        - forcetypeassert
        - gosec
        - gocyclo
        - gocognit

    - path: example_test\.go
      text: "exitAfterDefer"
      linters:
        - gocritic

    - path: .*/client/conn.go
      linters:
        - godox

    - path: .*.go
      text: "replace with standard maps package"
      linters:
        - godox

#   # Fix found issues (if it's supported by the linter).
#   fix: true

run:
  go: "1.20"
